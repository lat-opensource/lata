/* This file is autogenerated by scripts/decodetree.py. Modified some parts to be used directly for aarch64 instruction decoding */

static void decode_insn32_extract_addsub_imm(DisasContext *ctx, arg_rri_sf *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->imm = extract32(insn, 10, 12);
    a->rn = extract32(insn, 5, 5);
    a->sf = extract32(insn, 31, 1);
}

static void decode_insn32_extract_addsub_imm12(DisasContext *ctx, arg_rri_sf *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->imm = shl_12(ctx, extract32(insn, 10, 12));
    a->rn = extract32(insn, 5, 5);
    a->sf = extract32(insn, 31, 1);
}

static void decode_insn32_extract_addsub_imm_tag(DisasContext *ctx, arg_rri_tag *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->uimm4 = extract32(insn, 10, 4);
    a->uimm6 = extract32(insn, 16, 6);
    a->rn = extract32(insn, 5, 5);
}

static void decode_insn32_extract_atomic(DisasContext *ctx, arg_atomic *a, uint32_t insn)
{
    a->rs = extract32(insn, 16, 5);
    a->rt = extract32(insn, 0, 5);
    a->rn = extract32(insn, 5, 5);
    a->sz = extract32(insn, 30, 2);
    a->a = extract32(insn, 23, 1);
    a->r = extract32(insn, 22, 1);
}

static void decode_insn32_extract_bitfield_32(DisasContext *ctx, arg_bitfield *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->imms = extract32(insn, 10, 5);
    a->rn = extract32(insn, 5, 5);
    a->sf = 0;
    a->immr = extract32(insn, 16, 5);
}

static void decode_insn32_extract_bitfield_64(DisasContext *ctx, arg_bitfield *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->imms = extract32(insn, 10, 6);
    a->rn = extract32(insn, 5, 5);
    a->sf = 1;
    a->immr = extract32(insn, 16, 6);
}

static void decode_insn32_extract_branch(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 0, 26));
}

static void decode_insn32_extract_decode_insn32_Fmt_10(DisasContext *ctx, arg_extract *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->imm = extract32(insn, 10, 6);
    a->sf = 1;
}

static void decode_insn32_extract_decode_insn32_Fmt_11(DisasContext *ctx, arg_extract *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->imm = extract32(insn, 10, 5);
    a->sf = 0;
}

static void decode_insn32_extract_decode_insn32_Fmt_13(DisasContext *ctx, arg_cbz *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->imm = times_4(ctx, sextract32(insn, 5, 19));
    a->sf = extract32(insn, 31, 1);
    a->nz = extract32(insn, 24, 1);
}

static void decode_insn32_extract_decode_insn32_Fmt_14(DisasContext *ctx, arg_tbz *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 5, 14));
    a->rt = extract32(insn, 0, 5);
    a->nz = extract32(insn, 24, 1);
    a->bitpos = deposit32(extract32(insn, 19, 5), 5, 27, extract32(insn, 31, 1));
}

static void decode_insn32_extract_decode_insn32_Fmt_15(DisasContext *ctx, arg_decode_insn3211 *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 5, 19));
    a->cond = extract32(insn, 0, 4);
}

static void decode_insn32_extract_decode_insn32_Fmt_16(DisasContext *ctx, arg_r *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
}

static void decode_insn32_extract_decode_insn32_Fmt_17(DisasContext *ctx, arg_braz *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->m = extract32(insn, 10, 1);
}

static void decode_insn32_extract_decode_insn32_Fmt_18(DisasContext *ctx, arg_reta *a, uint32_t insn)
{
    a->m = extract32(insn, 10, 1);
}

static void decode_insn32_extract_decode_insn32_Fmt_19(DisasContext *ctx, arg_bra *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->rm = extract32(insn, 0, 5);
    a->m = extract32(insn, 10, 1);
}

static void decode_insn32_extract_decode_insn32_Fmt_20(DisasContext *ctx, arg_decode_insn3215 *a, uint32_t insn)
{
}

static void decode_insn32_extract_decode_insn32_Fmt_21(DisasContext *ctx, arg_decode_insn3216 *a, uint32_t insn)
{
    a->domain = extract32(insn, 10, 2);
    a->types = extract32(insn, 8, 2);
}

static void decode_insn32_extract_decode_insn32_Fmt_23(DisasContext *ctx, arg_decode_insn3217 *a, uint32_t insn)
{
    a->imm = extract32(insn, 8, 1);
    a->mask = extract32(insn, 9, 2);
}

static void decode_insn32_extract_decode_insn32_Fmt_24(DisasContext *ctx, arg_decode_insn3218 *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->op0 = 1;
    a->crn = extract32(insn, 12, 4);
    a->l = extract32(insn, 21, 1);
    a->op1 = extract32(insn, 16, 3);
    a->crm = extract32(insn, 8, 4);
    a->op2 = extract32(insn, 5, 3);
}

static void decode_insn32_extract_decode_insn32_Fmt_25(DisasContext *ctx, arg_decode_insn3218 *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->op0 = 2;
    a->crn = extract32(insn, 12, 4);
    a->l = extract32(insn, 21, 1);
    a->op1 = extract32(insn, 16, 3);
    a->crm = extract32(insn, 8, 4);
    a->op2 = extract32(insn, 5, 3);
}

static void decode_insn32_extract_decode_insn32_Fmt_26(DisasContext *ctx, arg_decode_insn3218 *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->op0 = 3;
    a->crn = extract32(insn, 12, 4);
    a->l = extract32(insn, 21, 1);
    a->op1 = extract32(insn, 16, 3);
    a->crm = extract32(insn, 8, 4);
    a->op2 = extract32(insn, 5, 3);
}

static void decode_insn32_extract_decode_insn32_Fmt_31(DisasContext *ctx, arg_decode_insn3221 *a, uint32_t insn)
{
    a->rs = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
    a->sz = plus_2(ctx, extract32(insn, 30, 1));
}

static void decode_insn32_extract_decode_insn32_Fmt_32(DisasContext *ctx, arg_decode_insn3221 *a, uint32_t insn)
{
    a->rs = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
    a->sz = extract32(insn, 30, 2);
}

static void decode_insn32_extract_decode_insn32_Fmt_42(DisasContext *ctx, arg_decode_insn3227 *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
    a->sz = extract32(insn, 30, 2);
}

static void decode_insn32_extract_decode_insn32_Fmt_43(DisasContext *ctx, arg_decode_insn3228 *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->rn = extract32(insn, 5, 5);
    a->w = extract32(insn, 11, 1);
    a->m = extract32(insn, 23, 1);
    a->imm = times_2(ctx, deposit32(extract32(insn, 12, 9), 9, 23, sextract32(insn, 22, 1)));
}

static void decode_insn32_extract_decode_insn32_Fmt_50(DisasContext *ctx, arg_decode_insn3232 *a, uint32_t insn)
{
    a->rm = extract32(insn, 16, 5);
    a->rt = extract32(insn, 0, 5);
    a->rn = extract32(insn, 5, 5);
    a->selem = plus_1(ctx, deposit32(extract32(insn, 21, 1), 1, 31, extract32(insn, 13, 1)));
    a->q = extract32(insn, 30, 1);
    a->scale = extract32(insn, 10, 2);
    a->p = extract32(insn, 23, 1);
}

static void decode_insn32_extract_i16(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 5, 16);
}

static void decode_insn32_extract_ldapr_stlr_i(DisasContext *ctx, arg_ldapr_stlr_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 12, 9);
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
}

static void decode_insn32_extract_ldlit(DisasContext *ctx, arg_ldlit *a, uint32_t insn)
{
    a->imm = times_4(ctx, sextract32(insn, 5, 19));
    a->rt = extract32(insn, 0, 5);
}

static void decode_insn32_extract_ldst(DisasContext *ctx, arg_ldst *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
    a->s = extract32(insn, 12, 1);
    a->rn = extract32(insn, 5, 5);
    a->opt = extract32(insn, 13, 3);
}

static void decode_insn32_extract_ldst_imm(DisasContext *ctx, arg_ldst_imm *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->unpriv = 0;
    a->rn = extract32(insn, 5, 5);
    a->w = 0;
    a->imm = sextract32(insn, 12, 9);
    a->p = 0;
}

static void decode_insn32_extract_ldst_imm_post(DisasContext *ctx, arg_ldst_imm *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->unpriv = 0;
    a->rn = extract32(insn, 5, 5);
    a->w = 1;
    a->imm = sextract32(insn, 12, 9);
    a->p = 1;
}

static void decode_insn32_extract_ldst_imm_pre(DisasContext *ctx, arg_ldst_imm *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->unpriv = 0;
    a->rn = extract32(insn, 5, 5);
    a->w = 1;
    a->imm = sextract32(insn, 12, 9);
    a->p = 0;
}

static void decode_insn32_extract_ldst_imm_user(DisasContext *ctx, arg_ldst_imm *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->unpriv = 1;
    a->rn = extract32(insn, 5, 5);
    a->w = 0;
    a->imm = sextract32(insn, 12, 9);
    a->p = 0;
}

static void decode_insn32_extract_ldst_mult(DisasContext *ctx, arg_ldst_mult *a, uint32_t insn)
{
    a->rm = extract32(insn, 16, 5);
    a->rt = extract32(insn, 0, 5);
    a->rn = extract32(insn, 5, 5);
    a->q = extract32(insn, 30, 1);
    a->sz = extract32(insn, 10, 2);
    a->p = extract32(insn, 23, 1);
}

static void decode_insn32_extract_ldst_single_b(DisasContext *ctx, arg_ldst_single *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->selem = plus_1(ctx, deposit32(extract32(insn, 21, 1), 1, 31, extract32(insn, 13, 1)));
    a->index = deposit32(extract32(insn, 10, 3), 3, 29, extract32(insn, 30, 1));
    a->scale = 0;
    a->p = extract32(insn, 23, 1);
}

static void decode_insn32_extract_ldst_single_d(DisasContext *ctx, arg_ldst_single *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->selem = plus_1(ctx, deposit32(extract32(insn, 21, 1), 1, 31, extract32(insn, 13, 1)));
    a->index = extract32(insn, 30, 1);
    a->scale = 3;
    a->p = extract32(insn, 23, 1);
}

static void decode_insn32_extract_ldst_single_h(DisasContext *ctx, arg_ldst_single *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->selem = plus_1(ctx, deposit32(extract32(insn, 21, 1), 1, 31, extract32(insn, 13, 1)));
    a->index = deposit32(extract32(insn, 11, 2), 2, 30, extract32(insn, 30, 1));
    a->scale = 1;
    a->p = extract32(insn, 23, 1);
}

static void decode_insn32_extract_ldst_single_s(DisasContext *ctx, arg_ldst_single *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->rm = extract32(insn, 16, 5);
    a->rn = extract32(insn, 5, 5);
    a->selem = plus_1(ctx, deposit32(extract32(insn, 21, 1), 1, 31, extract32(insn, 13, 1)));
    a->index = deposit32(extract32(insn, 12, 1), 1, 31, extract32(insn, 30, 1));
    a->scale = 2;
    a->p = extract32(insn, 23, 1);
}

static void decode_insn32_extract_ldst_tag(DisasContext *ctx, arg_ldst_tag *a, uint32_t insn)
{
    a->imm = scale_by_log2_tag_granule(ctx, sextract32(insn, 12, 9));
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
}

static void decode_insn32_extract_ldst_tag_mult(DisasContext *ctx, arg_ldst_tag *a, uint32_t insn)
{
    a->imm = 0;
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
}

static void decode_insn32_extract_ldst_uimm(DisasContext *ctx, arg_ldst_imm *a, uint32_t insn)
{
    a->rt = extract32(insn, 0, 5);
    a->unpriv = 0;
    a->rn = extract32(insn, 5, 5);
    a->w = 0;
    a->p = 0;
    a->imm = uimm_scaled(ctx, deposit32(extract32(a->sz, 0, 3), 3, 29, extract32(insn, 10, 12)));
}

static void decode_insn32_extract_ldstpair(DisasContext *ctx, arg_ldstpair *a, uint32_t insn)
{
    a->imm = sextract32(insn, 15, 7);
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
    a->rt2 = extract32(insn, 10, 5);
}

static void decode_insn32_extract_logic_imm_32(DisasContext *ctx, arg_rri_log *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->rn = extract32(insn, 5, 5);
    a->sf = 0;
    a->dbm = extract32(insn, 10, 12);
}

static void decode_insn32_extract_logic_imm_64(DisasContext *ctx, arg_rri_log *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->rn = extract32(insn, 5, 5);
    a->sf = 1;
    a->dbm = extract32(insn, 10, 13);
}

static void decode_insn32_extract_movw_32(DisasContext *ctx, arg_movw *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->imm = extract32(insn, 5, 16);
    a->sf = 0;
    a->hw = extract32(insn, 21, 1);
}

static void decode_insn32_extract_movw_64(DisasContext *ctx, arg_movw *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->imm = extract32(insn, 5, 16);
    a->sf = 1;
    a->hw = extract32(insn, 21, 2);
}

static void decode_insn32_extract_msr_i(DisasContext *ctx, arg_i *a, uint32_t insn)
{
    a->imm = extract32(insn, 8, 4);
}

static void decode_insn32_extract_pcrel(DisasContext *ctx, arg_ri *a, uint32_t insn)
{
    a->rd = extract32(insn, 0, 5);
    a->imm = deposit32(extract32(insn, 29, 2), 2, 30, sextract32(insn, 5, 19));
}

static void decode_insn32_extract_stlr(DisasContext *ctx, arg_stlr *a, uint32_t insn)
{
    a->rn = extract32(insn, 5, 5);
    a->rt = extract32(insn, 0, 5);
    a->sz = extract32(insn, 30, 2);
    a->lasr = extract32(insn, 15, 1);
}

static void decode_insn32_extract_stxp(DisasContext *ctx, arg_stxr *a, uint32_t insn)
{
    a->rs = extract32(insn, 16, 5);
    a->rt = extract32(insn, 0, 5);
    a->rt2 = extract32(insn, 10, 5);
    a->rn = extract32(insn, 5, 5);
    a->sz = plus_2(ctx, extract32(insn, 30, 1));
    a->lasr = extract32(insn, 15, 1);
}

static void decode_insn32_extract_stxr(DisasContext *ctx, arg_stxr *a, uint32_t insn)
{
    a->rs = extract32(insn, 16, 5);
    a->rt = extract32(insn, 0, 5);
    a->rt2 = extract32(insn, 10, 5);
    a->rn = extract32(insn, 5, 5);
    a->sz = extract32(insn, 30, 2);
    a->lasr = extract32(insn, 15, 1);
}

static bool decode_insn32(DisasContext *ctx, uint32_t insn)
{

    switch ((insn >> 26) & 0x7) {
    case 0x2:
        /* ...010.. ........ ........ ........ */
        switch (insn & 0x23800000) {
        case 0x00000000:
            /* ..001000 0....... ........ ........ */
            switch ((insn >> 21) & 0x1) {
            case 0x0:
                /* ..001000 0.0..... ........ ........ */
                decode_insn32_extract_stxr(ctx, &(ctx->arg).f_stxr, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* ..001000 000..... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:242 */
                    ctx->insn_type = AARCH64_A64_STXR;
                    return true;
                    break;
                case 0x1:
                    /* ..001000 010..... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:243 */
                    ctx->insn_type = AARCH64_A64_LDXR;
                    return true;
                    break;
                }
                break;
            case 0x1:
                /* ..001000 0.1..... ........ ........ */
                switch ((insn >> 31) & 0x1) {
                case 0x0:
                    /* 0.001000 0.1..... ........ ........ */
                    decode_insn32_extract_decode_insn32_Fmt_31(ctx, &(ctx->arg).f_decode_insn3221, insn);
                    switch ((insn >> 10) & 0x1f) {
                    case 0x1f:
                        /* 0.001000 0.1..... .11111.. ........ */
                        /* ../target/arm/tcg/a64.decode:252 */
                        ctx->insn_type = AARCH64_A64_CASP;
                        return true;
                        break;
                    }
                    break;
                case 0x1:
                    /* 1.001000 0.1..... ........ ........ */
                    decode_insn32_extract_stxp(ctx, &(ctx->arg).f_stxr, insn);
                    switch ((insn >> 22) & 0x1) {
                    case 0x0:
                        /* 1.001000 001..... ........ ........ */
                        /* ../target/arm/tcg/a64.decode:247 */
                        ctx->insn_type = AARCH64_A64_STXP;
                        return true;
                        break;
                    case 0x1:
                        /* 1.001000 011..... ........ ........ */
                        /* ../target/arm/tcg/a64.decode:248 */
                        ctx->insn_type = AARCH64_A64_LDXP;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        case 0x00800000:
            /* ..001000 1....... ........ ........ */
            switch (insn & 0x00207c00) {
            case 0x00007c00:
                /* ..001000 1.0..... .11111.. ........ */
                decode_insn32_extract_stlr(ctx, &(ctx->arg).f_stlr, insn);
                switch (insn & 0x005f0000) {
                case 0x001f0000:
                    /* ..001000 10011111 .11111.. ........ */
                    /* ../target/arm/tcg/a64.decode:244 */
                    ctx->insn_type = AARCH64_A64_STLR;
                    return true;
                    break;
                case 0x005f0000:
                    /* ..001000 11011111 .11111.. ........ */
                    /* ../target/arm/tcg/a64.decode:245 */
                    ctx->insn_type = AARCH64_A64_LDAR;
                    return true;
                    break;
                }
                break;
            case 0x00207c00:
                /* ..001000 1.1..... .11111.. ........ */
                /* ../target/arm/tcg/a64.decode:254 */
                decode_insn32_extract_decode_insn32_Fmt_32(ctx, &(ctx->arg).f_decode_insn3221, insn);
                ctx->insn_type = AARCH64_A64_CAS;
                return true;
                break;
            }
            break;
        case 0x20000000:
            /* ..101000 0....... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0xc0400000u) {
            case 0x00000000:
                /* 00101000 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:275 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x00400000:
                /* 00101000 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:276 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            case 0x80000000u:
                /* 10101000 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:277 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x80400000u:
                /* 10101000 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:278 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            }
            break;
        case 0x20800000:
            /* ..101000 1....... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0xc0400000u) {
            case 0x00000000:
                /* 00101000 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:287 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x00400000:
                /* 00101000 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:288 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            case 0x40000000:
                /* 01101000 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:326 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_STGP;
                return true;
                break;
            case 0x40400000:
                /* 01101000 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:289 */
                ctx->arg.f_ldstpair.sign = 1;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            case 0x80000000u:
                /* 10101000 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:290 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x80400000u:
                /* 10101000 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:291 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            }
            break;
        case 0x21000000:
            /* ..101001 0....... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0xc0400000u) {
            case 0x00000000:
                /* 00101001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:300 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x00400000:
                /* 00101001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:301 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            case 0x40000000:
                /* 01101001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:327 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STGP;
                return true;
                break;
            case 0x40400000:
                /* 01101001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:302 */
                ctx->arg.f_ldstpair.sign = 1;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            case 0x80000000u:
                /* 10101001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:303 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x80400000u:
                /* 10101001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:304 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            }
            break;
        case 0x21800000:
            /* ..101001 1....... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0xc0400000u) {
            case 0x00000000:
                /* 00101001 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:313 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x00400000:
                /* 00101001 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:314 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            case 0x40000000:
                /* 01101001 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:328 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STGP;
                return true;
                break;
            case 0x40400000:
                /* 01101001 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:315 */
                ctx->arg.f_ldstpair.sign = 1;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            case 0x80000000u:
                /* 10101001 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:316 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP;
                return true;
                break;
            case 0x80400000u:
                /* 10101001 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:317 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP;
                return true;
                break;
            }
            break;
        }
        break;
    case 0x3:
        /* ...011.. ........ ........ ........ */
        switch (insn & 0xa3400000u) {
        case 0x00000000:
            /* 0.001100 .0...... ........ ........ */
            decode_insn32_extract_ldst_mult(ctx, &(ctx->arg).f_ldst_mult, insn);
            switch (insn & 0x0020f000) {
            case 0x00000000:
                /* 0.001100 .00..... 0000.... ........ */
                /* ../target/arm/tcg/a64.decode:482 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 4;
                ctx->insn_type = AARCH64_A64_ST_mult;
                return true;
                break;
            case 0x00002000:
                /* 0.001100 .00..... 0010.... ........ */
                /* ../target/arm/tcg/a64.decode:483 */
                ctx->arg.f_ldst_mult.rpt = 4;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_ST_mult;
                return true;
                break;
            case 0x00004000:
                /* 0.001100 .00..... 0100.... ........ */
                /* ../target/arm/tcg/a64.decode:484 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 3;
                ctx->insn_type = AARCH64_A64_ST_mult;
                return true;
                break;
            case 0x00006000:
                /* 0.001100 .00..... 0110.... ........ */
                /* ../target/arm/tcg/a64.decode:485 */
                ctx->arg.f_ldst_mult.rpt = 3;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_ST_mult;
                return true;
                break;
            case 0x00007000:
                /* 0.001100 .00..... 0111.... ........ */
                /* ../target/arm/tcg/a64.decode:486 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_ST_mult;
                return true;
                break;
            case 0x00008000:
                /* 0.001100 .00..... 1000.... ........ */
                /* ../target/arm/tcg/a64.decode:487 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 2;
                ctx->insn_type = AARCH64_A64_ST_mult;
                return true;
                break;
            case 0x0000a000:
                /* 0.001100 .00..... 1010.... ........ */
                /* ../target/arm/tcg/a64.decode:488 */
                ctx->arg.f_ldst_mult.rpt = 2;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_ST_mult;
                return true;
                break;
            }
            break;
        case 0x00400000:
            /* 0.001100 .1...... ........ ........ */
            decode_insn32_extract_ldst_mult(ctx, &(ctx->arg).f_ldst_mult, insn);
            switch (insn & 0x0020f000) {
            case 0x00000000:
                /* 0.001100 .10..... 0000.... ........ */
                /* ../target/arm/tcg/a64.decode:490 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 4;
                ctx->insn_type = AARCH64_A64_LD_mult;
                return true;
                break;
            case 0x00002000:
                /* 0.001100 .10..... 0010.... ........ */
                /* ../target/arm/tcg/a64.decode:491 */
                ctx->arg.f_ldst_mult.rpt = 4;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_LD_mult;
                return true;
                break;
            case 0x00004000:
                /* 0.001100 .10..... 0100.... ........ */
                /* ../target/arm/tcg/a64.decode:492 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 3;
                ctx->insn_type = AARCH64_A64_LD_mult;
                return true;
                break;
            case 0x00006000:
                /* 0.001100 .10..... 0110.... ........ */
                /* ../target/arm/tcg/a64.decode:493 */
                ctx->arg.f_ldst_mult.rpt = 3;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_LD_mult;
                return true;
                break;
            case 0x00007000:
                /* 0.001100 .10..... 0111.... ........ */
                /* ../target/arm/tcg/a64.decode:494 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_LD_mult;
                return true;
                break;
            case 0x00008000:
                /* 0.001100 .10..... 1000.... ........ */
                /* ../target/arm/tcg/a64.decode:495 */
                ctx->arg.f_ldst_mult.rpt = 1;
                ctx->arg.f_ldst_mult.selem = 2;
                ctx->insn_type = AARCH64_A64_LD_mult;
                return true;
                break;
            case 0x0000a000:
                /* 0.001100 .10..... 1010.... ........ */
                /* ../target/arm/tcg/a64.decode:496 */
                ctx->arg.f_ldst_mult.rpt = 2;
                ctx->arg.f_ldst_mult.selem = 1;
                ctx->insn_type = AARCH64_A64_LD_mult;
                return true;
                break;
            }
            break;
        case 0x01000000:
            /* 0.001101 .0...... ........ ........ */
            switch ((insn >> 14) & 0x3) {
            case 0x0:
                /* 0.001101 .0...... 00...... ........ */
                /* ../target/arm/tcg/a64.decode:519 */
                decode_insn32_extract_ldst_single_b(ctx, &(ctx->arg).f_ldst_single, insn);
                ctx->insn_type = AARCH64_A64_ST_single;
                return true;
                break;
            case 0x1:
                /* 0.001101 .0...... 01...... ........ */
                decode_insn32_extract_ldst_single_h(ctx, &(ctx->arg).f_ldst_single, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 0.001101 .0...... 01...0.. ........ */
                    /* ../target/arm/tcg/a64.decode:520 */
                    ctx->insn_type = AARCH64_A64_ST_single;
                    return true;
                    break;
                }
                break;
            case 0x2:
                /* 0.001101 .0...... 10...... ........ */
                switch ((insn >> 10) & 0x3) {
                case 0x0:
                    /* 0.001101 .0...... 10..00.. ........ */
                    /* ../target/arm/tcg/a64.decode:521 */
                    decode_insn32_extract_ldst_single_s(ctx, &(ctx->arg).f_ldst_single, insn);
                    ctx->insn_type = AARCH64_A64_ST_single;
                    return true;
                    break;
                case 0x1:
                    /* 0.001101 .0...... 10..01.. ........ */
                    decode_insn32_extract_ldst_single_d(ctx, &(ctx->arg).f_ldst_single, insn);
                    switch ((insn >> 12) & 0x1) {
                    case 0x0:
                        /* 0.001101 .0...... 10.001.. ........ */
                        /* ../target/arm/tcg/a64.decode:522 */
                        ctx->insn_type = AARCH64_A64_ST_single;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        case 0x01400000:
            /* 0.001101 .1...... ........ ........ */
            switch ((insn >> 14) & 0x3) {
            case 0x0:
                /* 0.001101 .1...... 00...... ........ */
                /* ../target/arm/tcg/a64.decode:524 */
                decode_insn32_extract_ldst_single_b(ctx, &(ctx->arg).f_ldst_single, insn);
                ctx->insn_type = AARCH64_A64_LD_single;
                return true;
                break;
            case 0x1:
                /* 0.001101 .1...... 01...... ........ */
                decode_insn32_extract_ldst_single_h(ctx, &(ctx->arg).f_ldst_single, insn);
                switch ((insn >> 10) & 0x1) {
                case 0x0:
                    /* 0.001101 .1...... 01...0.. ........ */
                    /* ../target/arm/tcg/a64.decode:525 */
                    ctx->insn_type = AARCH64_A64_LD_single;
                    return true;
                    break;
                }
                break;
            case 0x2:
                /* 0.001101 .1...... 10...... ........ */
                switch ((insn >> 10) & 0x3) {
                case 0x0:
                    /* 0.001101 .1...... 10..00.. ........ */
                    /* ../target/arm/tcg/a64.decode:526 */
                    decode_insn32_extract_ldst_single_s(ctx, &(ctx->arg).f_ldst_single, insn);
                    ctx->insn_type = AARCH64_A64_LD_single;
                    return true;
                    break;
                case 0x1:
                    /* 0.001101 .1...... 10..01.. ........ */
                    decode_insn32_extract_ldst_single_d(ctx, &(ctx->arg).f_ldst_single, insn);
                    switch ((insn >> 12) & 0x1) {
                    case 0x0:
                        /* 0.001101 .1...... 10.001.. ........ */
                        /* ../target/arm/tcg/a64.decode:527 */
                        ctx->insn_type = AARCH64_A64_LD_single;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x3:
                /* 0.001101 .1...... 11...... ........ */
                decode_insn32_extract_decode_insn32_Fmt_50(ctx, &(ctx->arg).f_decode_insn3232, insn);
                switch ((insn >> 12) & 0x1) {
                case 0x0:
                    /* 0.001101 .1...... 11.0.... ........ */
                    /* ../target/arm/tcg/a64.decode:530 */
                    ctx->insn_type = AARCH64_A64_LD_single_repl;
                    return true;
                    break;
                }
                break;
            }
            break;
        case 0x20000000:
            /* 0.101100 .0...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 00101100 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:279 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x00800000:
                /* 00101100 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:292 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x40000000:
                /* 01101100 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:281 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x40800000:
                /* 01101100 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:294 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            }
            break;
        case 0x20400000:
            /* 0.101100 .1...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 00101100 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:280 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x00800000:
                /* 00101100 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:293 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x40000000:
                /* 01101100 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:282 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x40800000:
                /* 01101100 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:295 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            }
            break;
        case 0x21000000:
            /* 0.101101 .0...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 00101101 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:305 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x00800000:
                /* 00101101 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:318 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x40000000:
                /* 01101101 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:307 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x40800000:
                /* 01101101 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:320 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            }
            break;
        case 0x21400000:
            /* 0.101101 .1...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 00101101 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:306 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x00800000:
                /* 00101101 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:319 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 2;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x40000000:
                /* 01101101 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:308 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x40800000:
                /* 01101101 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:321 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 3;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            }
            break;
        case 0xa0000000u:
            /* 1.101100 .0...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 10101100 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:283 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x00800000:
                /* 10101100 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:296 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            }
            break;
        case 0xa0400000u:
            /* 1.101100 .1...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 10101100 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:284 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x00800000:
                /* 10101100 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:297 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 1;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            }
            break;
        case 0xa1000000u:
            /* 1.101101 .0...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 10101101 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:309 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            case 0x00800000:
                /* 10101101 10...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:322 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_STP_v;
                return true;
                break;
            }
            break;
        case 0xa1400000u:
            /* 1.101101 .1...... ........ ........ */
            decode_insn32_extract_ldstpair(ctx, &(ctx->arg).f_ldstpair, insn);
            switch (insn & 0x40800000) {
            case 0x00000000:
                /* 10101101 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:310 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 0;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            case 0x00800000:
                /* 10101101 11...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:323 */
                ctx->arg.f_ldstpair.sign = 0;
                ctx->arg.f_ldstpair.w = 1;
                ctx->arg.f_ldstpair.sz = 4;
                ctx->arg.f_ldstpair.p = 0;
                ctx->insn_type = AARCH64_A64_LDP_v;
                return true;
                break;
            }
            break;
        }
        break;
    case 0x4:
        /* ...100.. ........ ........ ........ */
        switch ((insn >> 24) & 0x3) {
        case 0x0:
            /* ...10000 ........ ........ ........ */
            decode_insn32_extract_pcrel(ctx, &(ctx->arg).f_ri, insn);
            switch ((insn >> 31) & 0x1) {
            case 0x0:
                /* 0..10000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:35 */
                ctx->insn_type = AARCH64_A64_ADR;
                return true;
                break;
            case 0x1:
                /* 1..10000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:36 */
                ctx->insn_type = AARCH64_A64_ADRP;
                return true;
                break;
            }
            break;
        case 0x1:
            /* ...10001 ........ ........ ........ */
            switch (insn & 0x60c00000) {
            case 0x00000000:
                /* .0010001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:44 */
                decode_insn32_extract_addsub_imm(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_ADD_i;
                return true;
                break;
            case 0x00400000:
                /* .0010001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:45 */
                decode_insn32_extract_addsub_imm12(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_ADD_i;
                return true;
                break;
            case 0x00800000:
                /* .0010001 10...... ........ ........ */
                decode_insn32_extract_addsub_imm_tag(ctx, &(ctx->arg).f_rri_tag, insn);
                switch (insn & 0x8000c000u) {
                case 0x80000000u:
                    /* 10010001 10...... 00...... ........ */
                    /* ../target/arm/tcg/a64.decode:59 */
                    ctx->insn_type = AARCH64_A64_ADDG_i;
                    return true;
                    break;
                }
                break;
            case 0x20000000:
                /* .0110001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:46 */
                decode_insn32_extract_addsub_imm(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_ADDS_i;
                return true;
                break;
            case 0x20400000:
                /* .0110001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:47 */
                decode_insn32_extract_addsub_imm12(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_ADDS_i;
                return true;
                break;
            case 0x40000000:
                /* .1010001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:49 */
                decode_insn32_extract_addsub_imm(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_SUB_i;
                return true;
                break;
            case 0x40400000:
                /* .1010001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:50 */
                decode_insn32_extract_addsub_imm12(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_SUB_i;
                return true;
                break;
            case 0x40800000:
                /* .1010001 10...... ........ ........ */
                decode_insn32_extract_addsub_imm_tag(ctx, &(ctx->arg).f_rri_tag, insn);
                switch (insn & 0x8000c000u) {
                case 0x80000000u:
                    /* 11010001 10...... 00...... ........ */
                    /* ../target/arm/tcg/a64.decode:60 */
                    ctx->insn_type = AARCH64_A64_SUBG_i;
                    return true;
                    break;
                }
                break;
            case 0x60000000:
                /* .1110001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:51 */
                decode_insn32_extract_addsub_imm(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_SUBS_i;
                return true;
                break;
            case 0x60400000:
                /* .1110001 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:52 */
                decode_insn32_extract_addsub_imm12(ctx, &(ctx->arg).f_rri_sf, insn);
                ctx->insn_type = AARCH64_A64_SUBS_i;
                return true;
                break;
            }
            break;
        case 0x2:
            /* ...10010 ........ ........ ........ */
            switch (insn & 0xe0800000u) {
            case 0x00000000:
                /* 00010010 0....... ........ ........ */
                decode_insn32_extract_logic_imm_32(ctx, &(ctx->arg).f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 00010010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:69 */
                    ctx->insn_type = AARCH64_A64_AND_i;
                    return true;
                    break;
                }
                break;
            case 0x00800000:
                /* 00010010 1....... ........ ........ */
                decode_insn32_extract_movw_32(ctx, &(ctx->arg).f_movw, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 00010010 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:84 */
                    ctx->insn_type = AARCH64_A64_MOVN;
                    return true;
                    break;
                }
                break;
            case 0x20000000:
                /* 00110010 0....... ........ ........ */
                decode_insn32_extract_logic_imm_32(ctx, &(ctx->arg).f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 00110010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:71 */
                    ctx->insn_type = AARCH64_A64_ORR_i;
                    return true;
                    break;
                }
                break;
            case 0x40000000:
                /* 01010010 0....... ........ ........ */
                decode_insn32_extract_logic_imm_32(ctx, &(ctx->arg).f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01010010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:73 */
                    ctx->insn_type = AARCH64_A64_EOR_i;
                    return true;
                    break;
                }
                break;
            case 0x40800000:
                /* 01010010 1....... ........ ........ */
                decode_insn32_extract_movw_32(ctx, &(ctx->arg).f_movw, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01010010 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:86 */
                    ctx->insn_type = AARCH64_A64_MOVZ;
                    return true;
                    break;
                }
                break;
            case 0x60000000:
                /* 01110010 0....... ........ ........ */
                decode_insn32_extract_logic_imm_32(ctx, &(ctx->arg).f_rri_log, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01110010 00...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:75 */
                    ctx->insn_type = AARCH64_A64_ANDS_i;
                    return true;
                    break;
                }
                break;
            case 0x60800000:
                /* 01110010 1....... ........ ........ */
                decode_insn32_extract_movw_32(ctx, &(ctx->arg).f_movw, insn);
                switch ((insn >> 22) & 0x1) {
                case 0x0:
                    /* 01110010 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:88 */
                    ctx->insn_type = AARCH64_A64_MOVK;
                    return true;
                    break;
                }
                break;
            case 0x80000000u:
                /* 10010010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:68 */
                decode_insn32_extract_logic_imm_64(ctx, &(ctx->arg).f_rri_log, insn);
                ctx->insn_type = AARCH64_A64_AND_i;
                return true;
                break;
            case 0x80800000u:
                /* 10010010 1....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:83 */
                decode_insn32_extract_movw_64(ctx, &(ctx->arg).f_movw, insn);
                ctx->insn_type = AARCH64_A64_MOVN;
                return true;
                break;
            case 0xa0000000u:
                /* 10110010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:70 */
                decode_insn32_extract_logic_imm_64(ctx, &(ctx->arg).f_rri_log, insn);
                ctx->insn_type = AARCH64_A64_ORR_i;
                return true;
                break;
            case 0xc0000000u:
                /* 11010010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:72 */
                decode_insn32_extract_logic_imm_64(ctx, &(ctx->arg).f_rri_log, insn);
                ctx->insn_type = AARCH64_A64_EOR_i;
                return true;
                break;
            case 0xc0800000u:
                /* 11010010 1....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:85 */
                decode_insn32_extract_movw_64(ctx, &(ctx->arg).f_movw, insn);
                ctx->insn_type = AARCH64_A64_MOVZ;
                return true;
                break;
            case 0xe0000000u:
                /* 11110010 0....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:74 */
                decode_insn32_extract_logic_imm_64(ctx, &(ctx->arg).f_rri_log, insn);
                ctx->insn_type = AARCH64_A64_ANDS_i;
                return true;
                break;
            case 0xe0800000u:
                /* 11110010 1....... ........ ........ */
                /* ../target/arm/tcg/a64.decode:87 */
                decode_insn32_extract_movw_64(ctx, &(ctx->arg).f_movw, insn);
                ctx->insn_type = AARCH64_A64_MOVK;
                return true;
                break;
            }
            break;
        case 0x3:
            /* ...10011 ........ ........ ........ */
            switch (insn & 0xe0c00000u) {
            case 0x00000000:
                /* 00010011 00...... ........ ........ */
                decode_insn32_extract_bitfield_32(ctx, &(ctx->arg).f_bitfield, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 00010011 000..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:97 */
                    ctx->insn_type = AARCH64_A64_SBFM;
                    return true;
                    break;
                }
                break;
            case 0x00800000:
                /* 00010011 10...... ........ ........ */
                decode_insn32_extract_decode_insn32_Fmt_11(ctx, &(ctx->arg).f_extract, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 00010011 100..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:108 */
                    ctx->insn_type = AARCH64_A64_EXTR;
                    return true;
                    break;
                }
                break;
            case 0x20000000:
                /* 00110011 00...... ........ ........ */
                decode_insn32_extract_bitfield_32(ctx, &(ctx->arg).f_bitfield, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 00110011 000..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:99 */
                    ctx->insn_type = AARCH64_A64_BFM;
                    return true;
                    break;
                }
                break;
            case 0x40000000:
                /* 01010011 00...... ........ ........ */
                decode_insn32_extract_bitfield_32(ctx, &(ctx->arg).f_bitfield, insn);
                switch (insn & 0x00208000) {
                case 0x00000000:
                    /* 01010011 000..... 0....... ........ */
                    /* ../target/arm/tcg/a64.decode:101 */
                    ctx->insn_type = AARCH64_A64_UBFM;
                    return true;
                    break;
                }
                break;
            case 0x80400000u:
                /* 10010011 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:96 */
                decode_insn32_extract_bitfield_64(ctx, &(ctx->arg).f_bitfield, insn);
                ctx->insn_type = AARCH64_A64_SBFM;
                return true;
                break;
            case 0x80c00000u:
                /* 10010011 11...... ........ ........ */
                decode_insn32_extract_decode_insn32_Fmt_10(ctx, &(ctx->arg).f_extract, insn);
                switch ((insn >> 21) & 0x1) {
                case 0x0:
                    /* 10010011 110..... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:107 */
                    ctx->insn_type = AARCH64_A64_EXTR;
                    return true;
                    break;
                }
                break;
            case 0xa0400000u:
                /* 10110011 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:98 */
                decode_insn32_extract_bitfield_64(ctx, &(ctx->arg).f_bitfield, insn);
                ctx->insn_type = AARCH64_A64_BFM;
                return true;
                break;
            case 0xc0400000u:
                /* 11010011 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:100 */
                decode_insn32_extract_bitfield_64(ctx, &(ctx->arg).f_bitfield, insn);
                ctx->insn_type = AARCH64_A64_UBFM;
                return true;
                break;
            }
            break;
        }
        break;
    case 0x5:
        /* ...101.. ........ ........ ........ */
        switch ((insn >> 29) & 0x3) {
        case 0x0:
            /* .00101.. ........ ........ ........ */
            decode_insn32_extract_branch(ctx, &(ctx->arg).f_i, insn);
            switch ((insn >> 31) & 0x1) {
            case 0x0:
                /* 000101.. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:115 */
                ctx->insn_type = AARCH64_A64_B;
                return true;
                break;
            case 0x1:
                /* 100101.. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:116 */
                ctx->insn_type = AARCH64_A64_BL;
                return true;
                break;
            }
            break;
        case 0x1:
            /* .01101.. ........ ........ ........ */
            switch ((insn >> 25) & 0x1) {
            case 0x0:
                /* .011010. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:121 */
                decode_insn32_extract_decode_insn32_Fmt_13(ctx, &(ctx->arg).f_cbz, insn);
                ctx->insn_type = AARCH64_A64_CBZ;
                return true;
                break;
            case 0x1:
                /* .011011. ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:127 */
                decode_insn32_extract_decode_insn32_Fmt_14(ctx, &(ctx->arg).f_tbz, insn);
                ctx->insn_type = AARCH64_A64_TBZ;
                return true;
                break;
            }
            break;
        case 0x2:
            /* .10101.. ........ ........ ........ */
            switch (insn & 0x83000000u) {
            case 0x00000000:
                /* 01010100 ........ ........ ........ */
                decode_insn32_extract_decode_insn32_Fmt_15(ctx, &(ctx->arg).f_decode_insn3211, insn);
                switch ((insn >> 4) & 0x1) {
                case 0x0:
                    /* 01010100 ........ ........ ...0.... */
                    /* ../target/arm/tcg/a64.decode:129 */
                    ctx->insn_type = AARCH64_A64_B_cond;
                    return true;
                    break;
                }
                break;
            case 0x80000000u:
                /* 11010100 ........ ........ ........ */
                decode_insn32_extract_i16(ctx, &(ctx->arg).f_i, insn);
                switch (insn & 0x00e0001f) {
                case 0x00000001:
                    /* 11010100 000..... ........ ...00001 */
                    /* ../target/arm/tcg/a64.decode:222 */
                    ctx->insn_type = AARCH64_A64_SVC;
                    return true;
                    break;
                case 0x00000002:
                    /* 11010100 000..... ........ ...00010 */
                    /* ../target/arm/tcg/a64.decode:223 */
                    ctx->insn_type = AARCH64_A64_HVC;
                    return true;
                    break;
                case 0x00000003:
                    /* 11010100 000..... ........ ...00011 */
                    /* ../target/arm/tcg/a64.decode:224 */
                    ctx->insn_type = AARCH64_A64_SMC;
                    return true;
                    break;
                case 0x00200000:
                    /* 11010100 001..... ........ ...00000 */
                    /* ../target/arm/tcg/a64.decode:225 */
                    ctx->insn_type = AARCH64_A64_BRK;
                    return true;
                    break;
                case 0x00400000:
                    /* 11010100 010..... ........ ...00000 */
                    /* ../target/arm/tcg/a64.decode:226 */
                    ctx->insn_type = AARCH64_A64_HLT;
                    return true;
                    break;
                }
                break;
            case 0x81000000u:
                /* 11010101 ........ ........ ........ */
                switch (insn & 0x00d80000) {
                case 0x00000000:
                    /* 11010101 00.00... ........ ........ */
                    switch (insn & 0x0027f01f) {
                    case 0x0000401f:
                        /* 11010101 00000000 0100.... ...11111 */
                        switch ((insn >> 5) & 0x7) {
                        case 0x0:
                            /* 11010101 00000000 0100.... 00011111 */
                            decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                            switch ((insn >> 8) & 0xf) {
                            case 0x0:
                                /* 11010101 00000000 01000000 00011111 */
                                /* ../target/arm/tcg/a64.decode:194 */
                                ctx->insn_type = AARCH64_A64_CFINV;
                                return true;
                                break;
                            }
                            break;
                        case 0x1:
                            /* 11010101 00000000 0100.... 00111111 */
                            decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                            switch ((insn >> 8) & 0xf) {
                            case 0x0:
                                /* 11010101 00000000 01000000 00111111 */
                                /* ../target/arm/tcg/a64.decode:195 */
                                ctx->insn_type = AARCH64_A64_XAFLAG;
                                return true;
                                break;
                            }
                            break;
                        case 0x2:
                            /* 11010101 00000000 0100.... 01011111 */
                            decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                            switch ((insn >> 8) & 0xf) {
                            case 0x0:
                                /* 11010101 00000000 01000000 01011111 */
                                /* ../target/arm/tcg/a64.decode:196 */
                                ctx->insn_type = AARCH64_A64_AXFLAG;
                                return true;
                                break;
                            }
                            break;
                        case 0x3:
                            /* 11010101 00000000 0100.... 01111111 */
                            /* ../target/arm/tcg/a64.decode:201 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_UAO;
                            return true;
                            break;
                        case 0x4:
                            /* 11010101 00000000 0100.... 10011111 */
                            /* ../target/arm/tcg/a64.decode:202 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_PAN;
                            return true;
                            break;
                        case 0x5:
                            /* 11010101 00000000 0100.... 10111111 */
                            /* ../target/arm/tcg/a64.decode:203 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_SPSEL;
                            return true;
                            break;
                        }
                        break;
                    case 0x0003201f:
                        /* 11010101 00000011 0010.... ...11111 */
                        if ((insn & 0x00000c00) == 0x00000000) {
                            /* 11010101 00000011 001000.. ...11111 */
                            decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                            switch ((insn >> 5) & 0x1f) {
                            case 0x1:
                                /* 11010101 00000011 00100000 00111111 */
                                /* ../target/arm/tcg/a64.decode:157 */
                                ctx->insn_type = AARCH64_A64_YIELD;
                                return true;
                                break;
                            case 0x2:
                                /* 11010101 00000011 00100000 01011111 */
                                /* ../target/arm/tcg/a64.decode:158 */
                                ctx->insn_type = AARCH64_A64_WFE;
                                return true;
                                break;
                            case 0x3:
                                /* 11010101 00000011 00100000 01111111 */
                                /* ../target/arm/tcg/a64.decode:159 */
                                ctx->insn_type = AARCH64_A64_WFI;
                                return true;
                                break;
                            case 0x7:
                                /* 11010101 00000011 00100000 11111111 */
                                /* ../target/arm/tcg/a64.decode:165 */
                                ctx->insn_type = AARCH64_A64_XPACLRI;
                                return true;
                                break;
                            case 0x8:
                                /* 11010101 00000011 00100001 00011111 */
                                /* ../target/arm/tcg/a64.decode:166 */
                                ctx->insn_type = AARCH64_A64_PACIA1716;
                                return true;
                                break;
                            case 0xa:
                                /* 11010101 00000011 00100001 01011111 */
                                /* ../target/arm/tcg/a64.decode:167 */
                                ctx->insn_type = AARCH64_A64_PACIB1716;
                                return true;
                                break;
                            case 0xc:
                                /* 11010101 00000011 00100001 10011111 */
                                /* ../target/arm/tcg/a64.decode:168 */
                                ctx->insn_type = AARCH64_A64_AUTIA1716;
                                return true;
                                break;
                            case 0xe:
                                /* 11010101 00000011 00100001 11011111 */
                                /* ../target/arm/tcg/a64.decode:169 */
                                ctx->insn_type = AARCH64_A64_AUTIB1716;
                                return true;
                                break;
                            case 0x10:
                                /* 11010101 00000011 00100010 00011111 */
                                /* ../target/arm/tcg/a64.decode:170 */
                                ctx->insn_type = AARCH64_A64_ESB;
                                return true;
                                break;
                            case 0x18:
                                /* 11010101 00000011 00100011 00011111 */
                                /* ../target/arm/tcg/a64.decode:171 */
                                ctx->insn_type = AARCH64_A64_PACIAZ;
                                return true;
                                break;
                            case 0x19:
                                /* 11010101 00000011 00100011 00111111 */
                                /* ../target/arm/tcg/a64.decode:172 */
                                ctx->insn_type = AARCH64_A64_PACIASP;
                                return true;
                                break;
                            case 0x1a:
                                /* 11010101 00000011 00100011 01011111 */
                                /* ../target/arm/tcg/a64.decode:173 */
                                ctx->insn_type = AARCH64_A64_PACIBZ;
                                return true;
                                break;
                            case 0x1b:
                                /* 11010101 00000011 00100011 01111111 */
                                /* ../target/arm/tcg/a64.decode:174 */
                                ctx->insn_type = AARCH64_A64_PACIBSP;
                                return true;
                                break;
                            case 0x1c:
                                /* 11010101 00000011 00100011 10011111 */
                                /* ../target/arm/tcg/a64.decode:175 */
                                ctx->insn_type = AARCH64_A64_AUTIAZ;
                                return true;
                                break;
                            case 0x1d:
                                /* 11010101 00000011 00100011 10111111 */
                                /* ../target/arm/tcg/a64.decode:176 */
                                ctx->insn_type = AARCH64_A64_AUTIASP;
                                return true;
                                break;
                            case 0x1e:
                                /* 11010101 00000011 00100011 11011111 */
                                /* ../target/arm/tcg/a64.decode:177 */
                                ctx->insn_type = AARCH64_A64_AUTIBZ;
                                return true;
                                break;
                            case 0x1f:
                                /* 11010101 00000011 00100011 11111111 */
                                /* ../target/arm/tcg/a64.decode:178 */
                                ctx->insn_type = AARCH64_A64_AUTIBSP;
                                return true;
                                break;
                            }
                        }
                        /* ../target/arm/tcg/a64.decode:182 */
                        decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                        ctx->insn_type = AARCH64_A64_NOP;
                        return true;
                        break;
                    case 0x0003301f:
                        /* 11010101 00000011 0011.... ...11111 */
                        switch ((insn >> 6) & 0x3) {
                        case 0x1:
                            /* 11010101 00000011 0011.... 01.11111 */
                            decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                            switch ((insn >> 5) & 0x1) {
                            case 0x0:
                                /* 11010101 00000011 0011.... 01011111 */
                                /* ../target/arm/tcg/a64.decode:187 */
                                ctx->insn_type = AARCH64_A64_CLREX;
                                return true;
                                break;
                            }
                            break;
                        case 0x2:
                            /* 11010101 00000011 0011.... 10.11111 */
                            /* ../target/arm/tcg/a64.decode:188 */
                            decode_insn32_extract_decode_insn32_Fmt_21(ctx, &(ctx->arg).f_decode_insn3216, insn);
                            ctx->insn_type = AARCH64_A64_DSB_DMB;
                            return true;
                            break;
                        case 0x3:
                            /* 11010101 00000011 0011.... 11.11111 */
                            decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                            switch ((insn >> 5) & 0x1) {
                            case 0x0:
                                /* 11010101 00000011 0011.... 11011111 */
                                /* ../target/arm/tcg/a64.decode:189 */
                                ctx->insn_type = AARCH64_A64_ISB;
                                return true;
                                break;
                            case 0x1:
                                /* 11010101 00000011 0011.... 11111111 */
                                switch ((insn >> 8) & 0xf) {
                                case 0x0:
                                    /* 11010101 00000011 00110000 11111111 */
                                    /* ../target/arm/tcg/a64.decode:190 */
                                    ctx->insn_type = AARCH64_A64_SB;
                                    return true;
                                    break;
                                }
                                break;
                            }
                            break;
                        }
                        break;
                    case 0x0003401f:
                        /* 11010101 00000011 0100.... ...11111 */
                        switch ((insn >> 5) & 0x7) {
                        case 0x1:
                            /* 11010101 00000011 0100.... 00111111 */
                            /* ../target/arm/tcg/a64.decode:204 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_SBSS;
                            return true;
                            break;
                        case 0x2:
                            /* 11010101 00000011 0100.... 01011111 */
                            /* ../target/arm/tcg/a64.decode:205 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_DIT;
                            return true;
                            break;
                        case 0x3:
                            /* 11010101 00000011 0100.... 01111111 */
                            decode_insn32_extract_decode_insn32_Fmt_23(ctx, &(ctx->arg).f_decode_insn3217, insn);
                            switch ((insn >> 11) & 0x1) {
                            case 0x0:
                                /* 11010101 00000011 01000... 01111111 */
                                /* ../target/arm/tcg/a64.decode:209 */
                                ctx->insn_type = AARCH64_A64_MSR_i_SVCR;
                                return true;
                                break;
                            }
                            break;
                        case 0x4:
                            /* 11010101 00000011 0100.... 10011111 */
                            /* ../target/arm/tcg/a64.decode:206 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_TCO;
                            return true;
                            break;
                        case 0x6:
                            /* 11010101 00000011 0100.... 11011111 */
                            /* ../target/arm/tcg/a64.decode:207 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_DAIFSET;
                            return true;
                            break;
                        case 0x7:
                            /* 11010101 00000011 0100.... 11111111 */
                            /* ../target/arm/tcg/a64.decode:208 */
                            decode_insn32_extract_msr_i(ctx, &(ctx->arg).f_i, insn);
                            ctx->insn_type = AARCH64_A64_MSR_i_DAIFCLEAR;
                            return true;
                            break;
                        }
                        break;
                    }
                    break;
                case 0x00080000:
                    /* 11010101 00.01... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:215 */
                    decode_insn32_extract_decode_insn32_Fmt_24(ctx, &(ctx->arg).f_decode_insn3218, insn);
                    ctx->insn_type = AARCH64_A64_SYS;
                    return true;
                    break;
                case 0x00100000:
                    /* 11010101 00.10... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:216 */
                    decode_insn32_extract_decode_insn32_Fmt_25(ctx, &(ctx->arg).f_decode_insn3218, insn);
                    ctx->insn_type = AARCH64_A64_SYS;
                    return true;
                    break;
                case 0x00180000:
                    /* 11010101 00.11... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:217 */
                    decode_insn32_extract_decode_insn32_Fmt_26(ctx, &(ctx->arg).f_decode_insn3218, insn);
                    ctx->insn_type = AARCH64_A64_SYS;
                    return true;
                    break;
                }
                break;
            case 0x82000000u:
                /* 11010110 ........ ........ ........ */
                switch (insn & 0x00fff81f) {
                case 0x001f0000:
                    /* 11010110 00011111 00000... ...00000 */
                    decode_insn32_extract_decode_insn32_Fmt_16(ctx, &(ctx->arg).f_r, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 11010110 00011111 000000.. ...00000 */
                        /* ../target/arm/tcg/a64.decode:131 */
                        ctx->insn_type = AARCH64_A64_BR;
                        return true;
                        break;
                    }
                    break;
                case 0x001f081f:
                    /* 11010110 00011111 00001... ...11111 */
                    /* ../target/arm/tcg/a64.decode:136 */
                    decode_insn32_extract_decode_insn32_Fmt_17(ctx, &(ctx->arg).f_braz, insn);
                    ctx->insn_type = AARCH64_A64_BRAZ;
                    return true;
                    break;
                case 0x003f0000:
                    /* 11010110 00111111 00000... ...00000 */
                    decode_insn32_extract_decode_insn32_Fmt_16(ctx, &(ctx->arg).f_r, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 11010110 00111111 000000.. ...00000 */
                        /* ../target/arm/tcg/a64.decode:132 */
                        ctx->insn_type = AARCH64_A64_BLR;
                        return true;
                        break;
                    }
                    break;
                case 0x003f081f:
                    /* 11010110 00111111 00001... ...11111 */
                    /* ../target/arm/tcg/a64.decode:137 */
                    decode_insn32_extract_decode_insn32_Fmt_17(ctx, &(ctx->arg).f_braz, insn);
                    ctx->insn_type = AARCH64_A64_BLRAZ;
                    return true;
                    break;
                case 0x005f0000:
                    /* 11010110 01011111 00000... ...00000 */
                    decode_insn32_extract_decode_insn32_Fmt_16(ctx, &(ctx->arg).f_r, insn);
                    switch ((insn >> 10) & 0x1) {
                    case 0x0:
                        /* 11010110 01011111 000000.. ...00000 */
                        /* ../target/arm/tcg/a64.decode:133 */
                        ctx->insn_type = AARCH64_A64_RET;
                        return true;
                        break;
                    }
                    break;
                case 0x005f081f:
                    /* 11010110 01011111 00001... ...11111 */
                    decode_insn32_extract_decode_insn32_Fmt_18(ctx, &(ctx->arg).f_reta, insn);
                    switch ((insn >> 5) & 0x1f) {
                    case 0x1f:
                        /* 11010110 01011111 00001.11 11111111 */
                        /* ../target/arm/tcg/a64.decode:140 */
                        ctx->insn_type = AARCH64_A64_RETA;
                        return true;
                        break;
                    }
                    break;
                case 0x009f0000:
                    /* 11010110 10011111 00000... ...00000 */
                    decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                    switch ((insn >> 5) & 0x3f) {
                    case 0x1f:
                        /* 11010110 10011111 00000011 11100000 */
                        /* ../target/arm/tcg/a64.decode:146 */
                        ctx->insn_type = AARCH64_A64_ERET;
                        return true;
                        break;
                    }
                    break;
                case 0x009f081f:
                    /* 11010110 10011111 00001... ...11111 */
                    decode_insn32_extract_decode_insn32_Fmt_18(ctx, &(ctx->arg).f_reta, insn);
                    switch ((insn >> 5) & 0x1f) {
                    case 0x1f:
                        /* 11010110 10011111 00001.11 11111111 */
                        /* ../target/arm/tcg/a64.decode:147 */
                        ctx->insn_type = AARCH64_A64_ERETA;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x83000000u:
                /* 11010111 ........ ........ ........ */
                decode_insn32_extract_decode_insn32_Fmt_19(ctx, &(ctx->arg).f_bra, insn);
                switch ((insn >> 11) & 0x1fff) {
                case 0x3e1:
                    /* 11010111 00011111 00001... ........ */
                    /* ../target/arm/tcg/a64.decode:143 */
                    ctx->insn_type = AARCH64_A64_BRA;
                    return true;
                    break;
                case 0x7e1:
                    /* 11010111 00111111 00001... ........ */
                    /* ../target/arm/tcg/a64.decode:144 */
                    ctx->insn_type = AARCH64_A64_BLRA;
                    return true;
                    break;
                }
                break;
            }
            break;
        }
        break;
    case 0x6:
        /* ...110.. ........ ........ ........ */
        switch (insn & 0x23000000) {
        case 0x00000000:
            /* ..011000 ........ ........ ........ */
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 00011000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:259 */
                decode_insn32_extract_ldlit(ctx, &(ctx->arg).f_ldlit, insn);
                ctx->arg.f_ldlit.sign = 0;
                ctx->arg.f_ldlit.sz = 2;
                ctx->insn_type = AARCH64_A64_LD_lit;
                return true;
                break;
            case 0x1:
                /* 01011000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:260 */
                decode_insn32_extract_ldlit(ctx, &(ctx->arg).f_ldlit, insn);
                ctx->arg.f_ldlit.sign = 0;
                ctx->arg.f_ldlit.sz = 3;
                ctx->insn_type = AARCH64_A64_LD_lit;
                return true;
                break;
            case 0x2:
                /* 10011000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:261 */
                decode_insn32_extract_ldlit(ctx, &(ctx->arg).f_ldlit, insn);
                ctx->arg.f_ldlit.sign = 1;
                ctx->arg.f_ldlit.sz = 2;
                ctx->insn_type = AARCH64_A64_LD_lit;
                return true;
                break;
            case 0x3:
                /* 11011000 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:267 */
                decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                ctx->insn_type = AARCH64_A64_NOP;
                return true;
                break;
            }
            break;
        case 0x01000000:
            /* ..011001 ........ ........ ........ */
            switch (insn & 0x00e00c00) {
            case 0x00000000:
                /* ..011001 000..... ....00.. ........ */
                /* ../target/arm/tcg/a64.decode:470 */
                decode_insn32_extract_ldapr_stlr_i(ctx, &(ctx->arg).f_ldapr_stlr_i, insn);
                ctx->arg.f_ldapr_stlr_i.ext = 0;
                ctx->arg.f_ldapr_stlr_i.sign = 0;
                ctx->arg.f_ldapr_stlr_i.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_STLR_i;
                return true;
                break;
            case 0x00200000:
                /* ..011001 001..... ....00.. ........ */
                decode_insn32_extract_ldst_tag_mult(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch (insn & 0xc01ff000u) {
                case 0xc0000000u:
                    /* 11011001 00100000 000000.. ........ */
                    /* ../target/arm/tcg/a64.decode:537 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STZGM;
                    return true;
                    break;
                }
                break;
            case 0x00200400:
                /* ..011001 001..... ....01.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 001..... ....01.. ........ */
                    /* ../target/arm/tcg/a64.decode:538 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 1;
                    ctx->insn_type = AARCH64_A64_STG;
                    return true;
                    break;
                }
                break;
            case 0x00200800:
                /* ..011001 001..... ....10.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 001..... ....10.. ........ */
                    /* ../target/arm/tcg/a64.decode:539 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STG;
                    return true;
                    break;
                }
                break;
            case 0x00200c00:
                /* ..011001 001..... ....11.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 001..... ....11.. ........ */
                    /* ../target/arm/tcg/a64.decode:540 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STG;
                    return true;
                    break;
                }
                break;
            case 0x00400000:
                /* ..011001 010..... ....00.. ........ */
                /* ../target/arm/tcg/a64.decode:471 */
                decode_insn32_extract_ldapr_stlr_i(ctx, &(ctx->arg).f_ldapr_stlr_i, insn);
                ctx->arg.f_ldapr_stlr_i.ext = 0;
                ctx->arg.f_ldapr_stlr_i.sign = 0;
                ctx->arg.f_ldapr_stlr_i.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_LDAPR_i;
                return true;
                break;
            case 0x00600000:
                /* ..011001 011..... ....00.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 011..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:542 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_LDG;
                    return true;
                    break;
                }
                break;
            case 0x00600400:
                /* ..011001 011..... ....01.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 011..... ....01.. ........ */
                    /* ../target/arm/tcg/a64.decode:543 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 1;
                    ctx->insn_type = AARCH64_A64_STZG;
                    return true;
                    break;
                }
                break;
            case 0x00600800:
                /* ..011001 011..... ....10.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 011..... ....10.. ........ */
                    /* ../target/arm/tcg/a64.decode:544 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STZG;
                    return true;
                    break;
                }
                break;
            case 0x00600c00:
                /* ..011001 011..... ....11.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 011..... ....11.. ........ */
                    /* ../target/arm/tcg/a64.decode:545 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STZG;
                    return true;
                    break;
                }
                break;
            case 0x00800000:
                /* ..011001 100..... ....00.. ........ */
                decode_insn32_extract_ldapr_stlr_i(ctx, &(ctx->arg).f_ldapr_stlr_i, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00011001 100..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:472 */
                    ctx->arg.f_ldapr_stlr_i.ext = 0;
                    ctx->arg.f_ldapr_stlr_i.sign = 1;
                    ctx->arg.f_ldapr_stlr_i.sz = 0;
                    ctx->insn_type = AARCH64_A64_LDAPR_i;
                    return true;
                    break;
                case 0x1:
                    /* 01011001 100..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:473 */
                    ctx->arg.f_ldapr_stlr_i.ext = 0;
                    ctx->arg.f_ldapr_stlr_i.sign = 1;
                    ctx->arg.f_ldapr_stlr_i.sz = 1;
                    ctx->insn_type = AARCH64_A64_LDAPR_i;
                    return true;
                    break;
                case 0x2:
                    /* 10011001 100..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:474 */
                    ctx->arg.f_ldapr_stlr_i.ext = 0;
                    ctx->arg.f_ldapr_stlr_i.sign = 1;
                    ctx->arg.f_ldapr_stlr_i.sz = 2;
                    ctx->insn_type = AARCH64_A64_LDAPR_i;
                    return true;
                    break;
                }
                break;
            case 0x00a00000:
                /* ..011001 101..... ....00.. ........ */
                decode_insn32_extract_ldst_tag_mult(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch (insn & 0xc01ff000u) {
                case 0xc0000000u:
                    /* 11011001 10100000 000000.. ........ */
                    /* ../target/arm/tcg/a64.decode:547 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STGM;
                    return true;
                    break;
                }
                break;
            case 0x00a00400:
                /* ..011001 101..... ....01.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 101..... ....01.. ........ */
                    /* ../target/arm/tcg/a64.decode:548 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 1;
                    ctx->insn_type = AARCH64_A64_ST2G;
                    return true;
                    break;
                }
                break;
            case 0x00a00800:
                /* ..011001 101..... ....10.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 101..... ....10.. ........ */
                    /* ../target/arm/tcg/a64.decode:549 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_ST2G;
                    return true;
                    break;
                }
                break;
            case 0x00a00c00:
                /* ..011001 101..... ....11.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 101..... ....11.. ........ */
                    /* ../target/arm/tcg/a64.decode:550 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_ST2G;
                    return true;
                    break;
                }
                break;
            case 0x00c00000:
                /* ..011001 110..... ....00.. ........ */
                decode_insn32_extract_ldapr_stlr_i(ctx, &(ctx->arg).f_ldapr_stlr_i, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00011001 110..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:475 */
                    ctx->arg.f_ldapr_stlr_i.ext = 1;
                    ctx->arg.f_ldapr_stlr_i.sign = 1;
                    ctx->arg.f_ldapr_stlr_i.sz = 0;
                    ctx->insn_type = AARCH64_A64_LDAPR_i;
                    return true;
                    break;
                case 0x1:
                    /* 01011001 110..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:476 */
                    ctx->arg.f_ldapr_stlr_i.ext = 1;
                    ctx->arg.f_ldapr_stlr_i.sign = 1;
                    ctx->arg.f_ldapr_stlr_i.sz = 1;
                    ctx->insn_type = AARCH64_A64_LDAPR_i;
                    return true;
                    break;
                }
                break;
            case 0x00e00000:
                /* ..011001 111..... ....00.. ........ */
                decode_insn32_extract_ldst_tag_mult(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch (insn & 0xc01ff000u) {
                case 0xc0000000u:
                    /* 11011001 11100000 000000.. ........ */
                    /* ../target/arm/tcg/a64.decode:552 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_LDGM;
                    return true;
                    break;
                }
                break;
            case 0x00e00400:
                /* ..011001 111..... ....01.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 111..... ....01.. ........ */
                    /* ../target/arm/tcg/a64.decode:553 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 1;
                    ctx->insn_type = AARCH64_A64_STZ2G;
                    return true;
                    break;
                }
                break;
            case 0x00e00800:
                /* ..011001 111..... ....10.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 111..... ....10.. ........ */
                    /* ../target/arm/tcg/a64.decode:554 */
                    ctx->arg.f_ldst_tag.w = 0;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STZ2G;
                    return true;
                    break;
                }
                break;
            case 0x00e00c00:
                /* ..011001 111..... ....11.. ........ */
                decode_insn32_extract_ldst_tag(ctx, &(ctx->arg).f_ldst_tag, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11011001 111..... ....11.. ........ */
                    /* ../target/arm/tcg/a64.decode:555 */
                    ctx->arg.f_ldst_tag.w = 1;
                    ctx->arg.f_ldst_tag.p = 0;
                    ctx->insn_type = AARCH64_A64_STZ2G;
                    return true;
                    break;
                }
                break;
            }
            break;
        case 0x20000000:
            /* ..111000 ........ ........ ........ */
            switch (insn & 0x00200400) {
            case 0x00000000:
                /* ..111000 ..0..... .....0.. ........ */
                switch (insn & 0x00c00800) {
                case 0x00000000:
                    /* ..111000 000..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:337 */
                    decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                    ctx->insn_type = AARCH64_A64_STR_i;
                    return true;
                    break;
                case 0x00000800:
                    /* ..111000 000..... ....10.. ........ */
                    /* ../target/arm/tcg/a64.decode:359 */
                    decode_insn32_extract_ldst_imm_user(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                    ctx->insn_type = AARCH64_A64_STR_i;
                    return true;
                    break;
                case 0x00400000:
                    /* ..111000 010..... ....00.. ........ */
                    decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 010..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:338 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 010..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:339 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 010..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:340 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x3:
                        /* 11111000 010..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:341 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 3;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00400800:
                    /* ..111000 010..... ....10.. ........ */
                    decode_insn32_extract_ldst_imm_user(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 010..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:360 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 010..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:361 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 010..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:362 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x3:
                        /* 11111000 010..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:363 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 3;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00800000:
                    /* ..111000 100..... ....00.. ........ */
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 100..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:342 */
                        decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 100..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:343 */
                        decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 100..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:344 */
                        decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x3:
                        /* 11111000 100..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:382 */
                        decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                        ctx->insn_type = AARCH64_A64_NOP;
                        return true;
                        break;
                    }
                    break;
                case 0x00800800:
                    /* ..111000 100..... ....10.. ........ */
                    decode_insn32_extract_ldst_imm_user(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 100..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:364 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 100..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:365 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 100..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:366 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00c00000:
                    /* ..111000 110..... ....00.. ........ */
                    decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 110..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:345 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 110..... ....00.. ........ */
                        /* ../target/arm/tcg/a64.decode:346 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00c00800:
                    /* ..111000 110..... ....10.. ........ */
                    decode_insn32_extract_ldst_imm_user(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 110..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:367 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 110..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:368 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x00000400:
                /* ..111000 ..0..... .....1.. ........ */
                switch (insn & 0x00c00800) {
                case 0x00000000:
                    /* ..111000 000..... ....01.. ........ */
                    /* ../target/arm/tcg/a64.decode:348 */
                    decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                    ctx->insn_type = AARCH64_A64_STR_i;
                    return true;
                    break;
                case 0x00000800:
                    /* ..111000 000..... ....11.. ........ */
                    /* ../target/arm/tcg/a64.decode:370 */
                    decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                    ctx->insn_type = AARCH64_A64_STR_i;
                    return true;
                    break;
                case 0x00400000:
                    /* ..111000 010..... ....01.. ........ */
                    decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 010..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:349 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 010..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:350 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 010..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:351 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x3:
                        /* 11111000 010..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:352 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 3;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00400800:
                    /* ..111000 010..... ....11.. ........ */
                    decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 010..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:371 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 010..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:372 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 010..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:373 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x3:
                        /* 11111000 010..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:374 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 0;
                        ctx->arg.f_ldst_imm.sz = 3;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00800000:
                    /* ..111000 100..... ....01.. ........ */
                    decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 100..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:353 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 100..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:354 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 100..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:355 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00800800:
                    /* ..111000 100..... ....11.. ........ */
                    decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 100..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:375 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 100..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:376 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x2:
                        /* 10111000 100..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:377 */
                        ctx->arg.f_ldst_imm.ext = 0;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 2;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00c00000:
                    /* ..111000 110..... ....01.. ........ */
                    decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 110..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:356 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 110..... ....01.. ........ */
                        /* ../target/arm/tcg/a64.decode:357 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                case 0x00c00800:
                    /* ..111000 110..... ....11.. ........ */
                    decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                    switch ((insn >> 30) & 0x3) {
                    case 0x0:
                        /* 00111000 110..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:378 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 0;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    case 0x1:
                        /* 01111000 110..... ....11.. ........ */
                        /* ../target/arm/tcg/a64.decode:379 */
                        ctx->arg.f_ldst_imm.ext = 1;
                        ctx->arg.f_ldst_imm.sign = 1;
                        ctx->arg.f_ldst_imm.sz = 1;
                        ctx->insn_type = AARCH64_A64_LDR_i;
                        return true;
                        break;
                    }
                    break;
                }
                break;
            case 0x00200000:
                /* ..111000 ..1..... .....0.. ........ */
                switch ((insn >> 11) & 0x1) {
                case 0x0:
                    /* ..111000 ..1..... ....00.. ........ */
                    switch ((insn >> 12) & 0xf) {
                    case 0x0:
                        /* ..111000 ..1..... 000000.. ........ */
                        /* ../target/arm/tcg/a64.decode:449 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDADD;
                        return true;
                        break;
                    case 0x1:
                        /* ..111000 ..1..... 000100.. ........ */
                        /* ../target/arm/tcg/a64.decode:450 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDCLR;
                        return true;
                        break;
                    case 0x2:
                        /* ..111000 ..1..... 001000.. ........ */
                        /* ../target/arm/tcg/a64.decode:451 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDEOR;
                        return true;
                        break;
                    case 0x3:
                        /* ..111000 ..1..... 001100.. ........ */
                        /* ../target/arm/tcg/a64.decode:452 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDSET;
                        return true;
                        break;
                    case 0x4:
                        /* ..111000 ..1..... 010000.. ........ */
                        /* ../target/arm/tcg/a64.decode:453 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDSMAX;
                        return true;
                        break;
                    case 0x5:
                        /* ..111000 ..1..... 010100.. ........ */
                        /* ../target/arm/tcg/a64.decode:454 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDSMIN;
                        return true;
                        break;
                    case 0x6:
                        /* ..111000 ..1..... 011000.. ........ */
                        /* ../target/arm/tcg/a64.decode:455 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDUMAX;
                        return true;
                        break;
                    case 0x7:
                        /* ..111000 ..1..... 011100.. ........ */
                        /* ../target/arm/tcg/a64.decode:456 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_LDUMIN;
                        return true;
                        break;
                    case 0x8:
                        /* ..111000 ..1..... 100000.. ........ */
                        /* ../target/arm/tcg/a64.decode:457 */
                        decode_insn32_extract_atomic(ctx, &(ctx->arg).f_atomic, insn);
                        ctx->insn_type = AARCH64_A64_SWP;
                        return true;
                        break;
                    case 0xc:
                        /* ..111000 ..1..... 110000.. ........ */
                        decode_insn32_extract_decode_insn32_Fmt_42(ctx, &(ctx->arg).f_decode_insn3227, insn);
                        switch (insn & 0x00df0000) {
                        case 0x009f0000:
                            /* ..111000 10111111 110000.. ........ */
                            /* ../target/arm/tcg/a64.decode:459 */
                            ctx->insn_type = AARCH64_A64_LDAPR;
                            return true;
                            break;
                        }
                        break;
                    }
                    break;
                case 0x1:
                    /* ..111000 ..1..... ....10.. ........ */
                    switch ((insn >> 22) & 0x3) {
                    case 0x0:
                        /* ..111000 001..... ....10.. ........ */
                        /* ../target/arm/tcg/a64.decode:427 */
                        decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                        ctx->arg.f_ldst.ext = 0;
                        ctx->arg.f_ldst.sign = 0;
                        ctx->arg.f_ldst.sz = extract32(insn, 30, 2);
                        ctx->insn_type = AARCH64_A64_STR;
                        return true;
                        break;
                    case 0x1:
                        /* ..111000 011..... ....10.. ........ */
                        decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                        switch ((insn >> 30) & 0x3) {
                        case 0x0:
                            /* 00111000 011..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:428 */
                            ctx->arg.f_ldst.ext = 1;
                            ctx->arg.f_ldst.sign = 0;
                            ctx->arg.f_ldst.sz = 0;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        case 0x1:
                            /* 01111000 011..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:429 */
                            ctx->arg.f_ldst.ext = 1;
                            ctx->arg.f_ldst.sign = 0;
                            ctx->arg.f_ldst.sz = 1;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        case 0x2:
                            /* 10111000 011..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:430 */
                            ctx->arg.f_ldst.ext = 1;
                            ctx->arg.f_ldst.sign = 0;
                            ctx->arg.f_ldst.sz = 2;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        case 0x3:
                            /* 11111000 011..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:431 */
                            ctx->arg.f_ldst.ext = 0;
                            ctx->arg.f_ldst.sign = 0;
                            ctx->arg.f_ldst.sz = 3;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        }
                        break;
                    case 0x2:
                        /* ..111000 101..... ....10.. ........ */
                        switch ((insn >> 30) & 0x3) {
                        case 0x0:
                            /* 00111000 101..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:432 */
                            decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                            ctx->arg.f_ldst.ext = 0;
                            ctx->arg.f_ldst.sign = 1;
                            ctx->arg.f_ldst.sz = 0;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        case 0x1:
                            /* 01111000 101..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:433 */
                            decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                            ctx->arg.f_ldst.ext = 0;
                            ctx->arg.f_ldst.sign = 1;
                            ctx->arg.f_ldst.sz = 1;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        case 0x2:
                            /* 10111000 101..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:434 */
                            decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                            ctx->arg.f_ldst.ext = 0;
                            ctx->arg.f_ldst.sign = 1;
                            ctx->arg.f_ldst.sz = 2;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        case 0x3:
                            /* 11111000 101..... ....10.. ........ */
                            decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                            switch ((insn >> 14) & 0x1) {
                            case 0x1:
                                /* 11111000 101..... .1..10.. ........ */
                                /* ../target/arm/tcg/a64.decode:439 */
                                ctx->insn_type = AARCH64_A64_NOP;
                                return true;
                                break;
                            }
                            break;
                        }
                        break;
                    case 0x3:
                        /* ..111000 111..... ....10.. ........ */
                        decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                        switch ((insn >> 30) & 0x3) {
                        case 0x0:
                            /* 00111000 111..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:435 */
                            ctx->arg.f_ldst.ext = 1;
                            ctx->arg.f_ldst.sign = 1;
                            ctx->arg.f_ldst.sz = 0;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        case 0x1:
                            /* 01111000 111..... ....10.. ........ */
                            /* ../target/arm/tcg/a64.decode:436 */
                            ctx->arg.f_ldst.ext = 1;
                            ctx->arg.f_ldst.sign = 1;
                            ctx->arg.f_ldst.sz = 1;
                            ctx->insn_type = AARCH64_A64_LDR;
                            return true;
                            break;
                        }
                        break;
                    }
                    break;
                }
                break;
            case 0x00200400:
                /* ..111000 ..1..... .....1.. ........ */
                decode_insn32_extract_decode_insn32_Fmt_43(ctx, &(ctx->arg).f_decode_insn3228, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x3:
                    /* 11111000 ..1..... .....1.. ........ */
                    /* ../target/arm/tcg/a64.decode:466 */
                    ctx->insn_type = AARCH64_A64_LDRA;
                    return true;
                    break;
                }
                break;
            }
            break;
        case 0x21000000:
            /* ..111001 ........ ........ ........ */
            switch ((insn >> 22) & 0x3) {
            case 0x0:
                /* ..111001 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:405 */
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->insn_type = AARCH64_A64_STR_i;
                return true;
                break;
            case 0x1:
                /* ..111001 01...... ........ ........ */
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111001 01...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:406 */
                    ctx->arg.f_ldst_imm.ext = 1;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 0;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                case 0x1:
                    /* 01111001 01...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:407 */
                    ctx->arg.f_ldst_imm.ext = 1;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 1;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                case 0x2:
                    /* 10111001 01...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:408 */
                    ctx->arg.f_ldst_imm.ext = 1;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 2;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                case 0x3:
                    /* 11111001 01...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:409 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 3;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                }
                break;
            case 0x2:
                /* ..111001 10...... ........ ........ */
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111001 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:410 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 1;
                    ctx->arg.f_ldst_imm.sz = 0;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                case 0x1:
                    /* 01111001 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:411 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 1;
                    ctx->arg.f_ldst_imm.sz = 1;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                case 0x2:
                    /* 10111001 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:412 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 1;
                    ctx->arg.f_ldst_imm.sz = 2;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                case 0x3:
                    /* 11111001 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:417 */
                    decode_insn32_extract_decode_insn32_Fmt_20(ctx, &(ctx->arg).f_decode_insn3215, insn);
                    ctx->insn_type = AARCH64_A64_NOP;
                    return true;
                    break;
                }
                break;
            case 0x3:
                /* ..111001 11...... ........ ........ */
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111001 11...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:413 */
                    ctx->arg.f_ldst_imm.ext = 1;
                    ctx->arg.f_ldst_imm.sign = 1;
                    ctx->arg.f_ldst_imm.sz = 0;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                case 0x1:
                    /* 01111001 11...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:414 */
                    ctx->arg.f_ldst_imm.ext = 1;
                    ctx->arg.f_ldst_imm.sign = 1;
                    ctx->arg.f_ldst_imm.sz = 1;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_i;
                    return true;
                    break;
                }
                break;
            }
            break;
        }
        break;
    case 0x7:
        /* ...111.. ........ ........ ........ */
        switch (insn & 0x23000000) {
        case 0x00000000:
            /* ..011100 ........ ........ ........ */
            decode_insn32_extract_ldlit(ctx, &(ctx->arg).f_ldlit, insn);
            switch ((insn >> 30) & 0x3) {
            case 0x0:
                /* 00011100 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:262 */
                ctx->arg.f_ldlit.sign = 0;
                ctx->arg.f_ldlit.sz = 2;
                ctx->insn_type = AARCH64_A64_LD_lit_v;
                return true;
                break;
            case 0x1:
                /* 01011100 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:263 */
                ctx->arg.f_ldlit.sign = 0;
                ctx->arg.f_ldlit.sz = 3;
                ctx->insn_type = AARCH64_A64_LD_lit_v;
                return true;
                break;
            case 0x2:
                /* 10011100 ........ ........ ........ */
                /* ../target/arm/tcg/a64.decode:264 */
                ctx->arg.f_ldlit.sign = 0;
                ctx->arg.f_ldlit.sz = 4;
                ctx->insn_type = AARCH64_A64_LD_lit_v;
                return true;
                break;
            }
            break;
        case 0x20000000:
            /* ..111100 ........ ........ ........ */
            switch (insn & 0x00e00c00) {
            case 0x00000000:
                /* ..111100 000..... ....00.. ........ */
                /* ../target/arm/tcg/a64.decode:384 */
                decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_STR_v_i;
                return true;
                break;
            case 0x00000400:
                /* ..111100 000..... ....01.. ........ */
                /* ../target/arm/tcg/a64.decode:389 */
                decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_STR_v_i;
                return true;
                break;
            case 0x00000c00:
                /* ..111100 000..... ....11.. ........ */
                /* ../target/arm/tcg/a64.decode:394 */
                decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_STR_v_i;
                return true;
                break;
            case 0x00200800:
                /* ..111100 001..... ....10.. ........ */
                /* ../target/arm/tcg/a64.decode:441 */
                decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                ctx->arg.f_ldst.ext = 0;
                ctx->arg.f_ldst.sign = 0;
                ctx->arg.f_ldst.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_STR_v;
                return true;
                break;
            case 0x00400000:
                /* ..111100 010..... ....00.. ........ */
                /* ../target/arm/tcg/a64.decode:386 */
                decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_LDR_v_i;
                return true;
                break;
            case 0x00400400:
                /* ..111100 010..... ....01.. ........ */
                /* ../target/arm/tcg/a64.decode:391 */
                decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_LDR_v_i;
                return true;
                break;
            case 0x00400c00:
                /* ..111100 010..... ....11.. ........ */
                /* ../target/arm/tcg/a64.decode:396 */
                decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_LDR_v_i;
                return true;
                break;
            case 0x00600800:
                /* ..111100 011..... ....10.. ........ */
                /* ../target/arm/tcg/a64.decode:443 */
                decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                ctx->arg.f_ldst.ext = 0;
                ctx->arg.f_ldst.sign = 0;
                ctx->arg.f_ldst.sz = extract32(insn, 30, 2);
                ctx->insn_type = AARCH64_A64_LDR_v;
                return true;
                break;
            case 0x00800000:
                /* ..111100 100..... ....00.. ........ */
                decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 100..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:385 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    ctx->insn_type = AARCH64_A64_STR_v_i;
                    return true;
                    break;
                }
                break;
            case 0x00800400:
                /* ..111100 100..... ....01.. ........ */
                decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 100..... ....01.. ........ */
                    /* ../target/arm/tcg/a64.decode:390 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    ctx->insn_type = AARCH64_A64_STR_v_i;
                    return true;
                    break;
                }
                break;
            case 0x00800c00:
                /* ..111100 100..... ....11.. ........ */
                decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 100..... ....11.. ........ */
                    /* ../target/arm/tcg/a64.decode:395 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    ctx->insn_type = AARCH64_A64_STR_v_i;
                    return true;
                    break;
                }
                break;
            case 0x00a00800:
                /* ..111100 101..... ....10.. ........ */
                decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 101..... ....10.. ........ */
                    /* ../target/arm/tcg/a64.decode:442 */
                    ctx->arg.f_ldst.ext = 0;
                    ctx->arg.f_ldst.sign = 0;
                    ctx->arg.f_ldst.sz = 4;
                    ctx->insn_type = AARCH64_A64_STR_v;
                    return true;
                    break;
                }
                break;
            case 0x00c00000:
                /* ..111100 110..... ....00.. ........ */
                decode_insn32_extract_ldst_imm(ctx, &(ctx->arg).f_ldst_imm, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 110..... ....00.. ........ */
                    /* ../target/arm/tcg/a64.decode:387 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    ctx->insn_type = AARCH64_A64_LDR_v_i;
                    return true;
                    break;
                }
                break;
            case 0x00c00400:
                /* ..111100 110..... ....01.. ........ */
                decode_insn32_extract_ldst_imm_post(ctx, &(ctx->arg).f_ldst_imm, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 110..... ....01.. ........ */
                    /* ../target/arm/tcg/a64.decode:392 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    ctx->insn_type = AARCH64_A64_LDR_v_i;
                    return true;
                    break;
                }
                break;
            case 0x00c00c00:
                /* ..111100 110..... ....11.. ........ */
                decode_insn32_extract_ldst_imm_pre(ctx, &(ctx->arg).f_ldst_imm, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 110..... ....11.. ........ */
                    /* ../target/arm/tcg/a64.decode:397 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    ctx->insn_type = AARCH64_A64_LDR_v_i;
                    return true;
                    break;
                }
                break;
            case 0x00e00800:
                /* ..111100 111..... ....10.. ........ */
                decode_insn32_extract_ldst(ctx, &(ctx->arg).f_ldst, insn);
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111100 111..... ....10.. ........ */
                    /* ../target/arm/tcg/a64.decode:444 */
                    ctx->arg.f_ldst.ext = 0;
                    ctx->arg.f_ldst.sign = 0;
                    ctx->arg.f_ldst.sz = 4;
                    ctx->insn_type = AARCH64_A64_LDR_v;
                    return true;
                    break;
                }
                break;
            }
            break;
        case 0x21000000:
            /* ..111101 ........ ........ ........ */
            switch ((insn >> 22) & 0x3) {
            case 0x0:
                /* ..111101 00...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:419 */
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->insn_type = AARCH64_A64_STR_v_i;
                return true;
                break;
            case 0x1:
                /* ..111101 01...... ........ ........ */
                /* ../target/arm/tcg/a64.decode:421 */
                ctx->arg.f_ldst_imm.ext = 0;
                ctx->arg.f_ldst_imm.sign = 0;
                ctx->arg.f_ldst_imm.sz = extract32(insn, 30, 2);
                decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                ctx->insn_type = AARCH64_A64_LDR_v_i;
                return true;
                break;
            case 0x2:
                /* ..111101 10...... ........ ........ */
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111101 10...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:420 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_STR_v_i;
                    return true;
                    break;
                }
                break;
            case 0x3:
                /* ..111101 11...... ........ ........ */
                switch ((insn >> 30) & 0x3) {
                case 0x0:
                    /* 00111101 11...... ........ ........ */
                    /* ../target/arm/tcg/a64.decode:422 */
                    ctx->arg.f_ldst_imm.ext = 0;
                    ctx->arg.f_ldst_imm.sign = 0;
                    ctx->arg.f_ldst_imm.sz = 4;
                    decode_insn32_extract_ldst_uimm(ctx, &(ctx->arg).f_ldst_imm, insn);
                    ctx->insn_type = AARCH64_A64_LDR_v_i;
                    return true;
                    break;
                }
                break;
            }
            break;
        }
        break;
    }
    return false;
}
